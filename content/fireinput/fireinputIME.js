
Fireinput.imeEngine = function() {
}; 

Fireinput.imeEngine.prototype = 
{
    codeHash: null,
    phraseCodeHash: null, 
    name: null, 
    letterMode: Fireinput.HALF_LETTER_MODE, 
    punctMode: Fireinput.HALF_PUNCT_MODE, 
    tabIndex: -1, 

    getName: function ()
    {
       return this.name; 
    },

    loadTable: function()
    {
    
    },

    find: function(inputChar)
    {

    },

    next: function (index)
    {

    },

    prev: function (index)
    {

    }, 

    getDataPath: function()
    {
       var path = Fireinput.util.getExtensionPath();
       path = path.substring(0, path.length - 19);

       if(/chrome/.test(path))
       {
          return path.substring(0, path.lastIndexOf("/chrome"));
       }

       return path;
    },

    getPinyinDataFile: function()
    {

       return "/chrome/data/smart_pinyin_table"; 
    }, 

    getPinyinPhraseFile: function()
    {
       return "/chrome/data/smart_pinyin_phrase";
    }, 
 
    getWubi86File: function()
    {
       return "/chrome/data/wubi86_table"; 
    }, 

    getWubi98File: function()
    {
       return "/chrome/data/wubi98_table"; 
    }, 

    getCangjie5File: function()
    {
       return "/chrome/data/cangjie5_table";
    },

    getZhengmaFile: function()
    {
       return "/chrome/data/zhengma_table";
    },

    /* has net table data file */
    hasNetTableFile: function()
    {

    }, 

    /* The data downloaded from internet */
    getNetPinyinDataFile: function()
    {
       return Fireinput.util.getUserFile("smart_pinyin_table");
    },

    getNetPinyinPhraseFile: function()
    {
       return Fireinput.util.getUserFile("smart_pinyin_phrase");
    },

    getNetWubi86File: function()
    {
       return Fireinput.util.getUserFile("wubi86_table");
    },

    getNetWubi98File: function()
    {
       return Fireinput.util.getUserFile("wubi98_table");
    },

    getNetCangjie5File: function()
    {
       return Fireinput.util.getUserFile("cangjie5_table");
    },

    getNetZhengmaFile: function()
    {
       return Fireinput.util.getUserFile("zhengma_table");
    },


    /* Data file generated by user activity */
    getUserDataFile: function()
    {
       return Fireinput.util.getUserFile("userwordtable.fireinput");
    }, 

    getExtDataFile: function()
    {
       return Fireinput.util.getUserFile("extwordtable.fireinput");
    },
 
    getUserHistoryFile: function()
    {
       return Fireinput.util.getUserFile("userhistory.fireinput.rdf");
    }, 
  
    getPinyinTransformFile: function()
    {
       return "/chrome/data/pinyin_transform";
    }, 

    sortCodeArray: function (a, b)
    {
       if(!a || !b)
          return 0;

       //a = converter.convertStringToUTF8(a, "ASCII", false);
       //b = converter.convertStringToUTF8(b, "ASCII", false);
       var num1 = a.word.match(/[\d\.]+/g)[0];
       var num2 = b.word.match(/[\d\.]+/g)[0];
       var str1 = a.word.match(/[\D\.]+/g)[0];
       var str2 = b.word.match(/[\D\.]+/g)[0];

       if(num2 != num1)
          return num2 - num1; 

       if(str2.length != str1.length)
          return str2.length - str1.length;

       return 0; 
    },

    sortKeyArray: function (a, b)
    {
       if(!a || !b)
          return 0;

       var num1 = a.match(/[\d\.]+/g)[0];
       var num2 = b.match(/[\d\.]+/g)[0];

       if(num2 != num1)
          return num2 - num1; 

       return 0; 
    },

    getKeyWord: function(wordArray)
    {
       if(!wordArray) return null; 
       var str = "";
       for(var i=0; i<wordArray.length; i++)
       {
          str += wordArray[i].key + "=" + wordArray[i].word + "=" + ((typeof(wordArray[i].ufreq) == 'undefined') ? 'true' : wordArray[i].ufreq); 
          str += ",";
       }
       str = Fireinput.util.unicode.getUnicodeString(str);
       var strArray = str.split(",");
       return (strArray.slice(0, strArray.length-1));
    },

    getLetterMode: function() 
    {
       return this.letterMode; 
    },

    isHalfLetterMode: function()
    {
       return this.letterMode == Fireinput.HALF_LETTER_MODE; 
    }, 

    setHalfLetterMode: function()
    {
       this.letterMode = Fireinput.HALF_LETTER_MODE; 
    },

    setFullLetterMode: function()
    {
       this.letterMode = Fireinput.FULL_LETTER_MODE; 
    },

    getPunctMode: function() 
    {
       return this.punctMode; 
    },

    isHalfPunctMode: function()
    {
       return this.punctMode == Fireinput.HALF_PUNCT_MODE;
    },
  
    setHalfPunctMode: function()
    {
       this.punctMode = Fireinput.HALF_PUNCT_MODE;
    },

    setFullPunctMode: function()
    {
       this.punctMode = Fireinput.FULL_PUNCT_MODE;    
    },

    getMaxAllowedKeys: function()
    {
       // default unlimited for pinyin 
       return 0; 
    }, 

    setBrowserIndex: function(i)
    {
       this.tabIndex = i; 
    }
    
};

